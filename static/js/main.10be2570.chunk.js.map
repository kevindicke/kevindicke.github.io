{"version":3,"sources":["Components/px-vw.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["displayNone","display","copiedText","color","cont","maxWidth","margin","padding","field","fontSize","marginBottom","marginTop","label","width","verticalAlign","textAlign","paddingBottom","input","border","height","float","clear","boxSizing","letterSpacing","lineHeight","borderRadius","background","fontFamily","textIndent","textTransform","outline","outputlabel","_outputlabel","Object","defineProperty","button","borderColor","fontWeight","backgroundColor","animation","cursor","output","flexDirection","alignItems","after","position","left","top","borderWidth","borderStyle","transform","Pxvw","_useState","useState","_useState2","slicedToArray","setDisplay","_useState3","_useState4","vwVal","setVwVal","_useState5","_useState6","setCopyVal","_useState7","_useState8","isCopied","setIsCopied","_useState9","_useState10","viewPort","setViewPort","pixel","React","createRef","viewPixel","outLabel","outPut","show","pxValue","current","value","vpwidth","Number","isInteger","parseFloat","vwValue","String","split","substring","join","innerText","copyToClipboard","copy","setTimeout","react_default","a","createElement","style","ref","name","autoFocus","onChange","type","min","className","placeholder","onClick","id","Home","src","alt","home","Convert","pxvw","App","react_router_dom","basename","to","react_router","exact","path","component","Boolean","window","location","hostname","match","console","log","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10be2570.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport copy from 'clipboard-copy'\nimport '../App.css';\n\nfunction Pxvw() {\n  const [display, setDisplay] = useState(false)\n  const [vwVal , setVwVal] = useState(\"\")\n  const [copyVal, setCopyVal] = useState(\"\")\n  const [isCopied, setIsCopied] = useState(false)\n  const [viewPort, setViewPort] = useState(\"1920\")\n  let pixel = React.createRef()\n  let viewPixel = React.createRef()\n  let outLabel = React.createRef()\n  let outPut = React.createRef()\n\n  function show(){\n    var pxValue = pixel.current.value\n    var vpwidth = viewPixel.current.value;\n    if(Number.isInteger(parseFloat(pxValue / vpwidth) * 100)){\n      var vwValue = String(parseFloat(pxValue / vpwidth) * 100)\n    } else {\n      var vwValue = String(parseFloat(pxValue / vpwidth) * 100).split(\".\");\n      vwValue[1] = vwValue[1].substring(0,2)\n      vwValue = vwValue.join(\".\")\n    }\n      outLabel.current.innerText = vwValue + \"vw\";\n      setVwVal(vwValue + \"vw\")\n      setDisplay(true)\n  }\n\n  function updateViewSize(){\n    var vpwidth = viewPixel.current.value\n    setViewPort(vpwidth)\n    if(vpwidth > 0){show()}\n  }\n\n  function copyToClipboard() {\n    setCopyVal(vwVal)\n    copy(vwVal)\n    setIsCopied(true)\n    setTimeout(() => {setIsCopied(false)},1000)\n  }\n  return (\n    <div>\n      <div style={cont}>\n        <div style={field}>\n          <label style={label}>Enter Your Pixel Unit</label>\n          <input style={input} ref={pixel} name=\"pixel\" autoFocus onChange={show} type=\"number\" min=\"0\" className=\"m-pixel\" placeholder=\"enter your pixel unit\"/>\n        </div>\n        <div style={field}>\n          <label style={label}>Enter Your viewport width</label>\n          <input style={input} ref={viewPixel} onChange={updateViewSize} name=\"vpwidth\"  type=\"number\" min=\"0\" className=\"m-vpwidth\" value={viewPort}/>\n        </div>\n        <div className=\"output\" ref={outPut} style={display ? output : displayNone} onClick={copyToClipboard}>\n          <label id=\"labelText\" style={outputlabel} ref={outLabel}></label>\n          <button style={button} onClick={copyToClipboard}>Click to copy to clipboard<span style={after}></span></button>\n          <h3 id=\"copied\" style={isCopied ? copiedText : displayNone}>Copied</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst displayNone = {display:\"none\"}\nconst copiedText = {display:\"block\",color:\"#FFF\"}\nconst cont = {maxWidth:\"1200px\",margin:\"14% auto\",padding:\"0 15px\"}\nconst field = {fontSize:0,marginBottom:\"3vw\",marginTop:\"5vw\"}\nconst label = {fontSize:\"2vw\",width:\"50%\",display:\"inline-block\",verticalAlign:\"middle\",textAlign:\"left\",paddingBottom:0,color:\"#FFF\"}\nconst input = {fontSize:\"1vw\",border:\"0 solid #3f424c\",width:\"50%\",marginBottom:0,height:\"7vw\",float:\"none\",clear:\"both\",boxSizing:\"border-box\",display:\"inline-block\",verticalAlign:\"middle\",letterSpacing:\".6vw\",lineHeight:\"normal\",borderRadius:0,background:\"#FFF\",color:\"#ff69b4\",fontFamily:\"news-gothic-std ,sans-serif\",textIndent:0,textTransform:\"lowercase\",padding:\"0 2.6vw\",outline:\"none\"}\nconst outputlabel = {background:\"none #42476a\",width:\"100%\",display:\"block\",margin:\"20px 0\",textAlign:\"center\",fontSize:\"3vw\",fontSize:\"3vw\",padding:\"20px 0\",cursor:\"pointer\",color:\"#FFF\"}\nconst button = {width:\"500px\",height:\"50px\",borderRadius:\"1px\",borderColor:\"#42476a\",fontSize:\"20px\",fontWeight:500,color:\"#FFF\",backgroundColor:\"#42476a\",animation:\"bounce infinite 4s\",marginTop:\"10px\",cursor:\"pointer\"}\nconst output = {display:\"flex\",flexDirection:\"column\",alignItems:\"center\"}\nconst after = {position:\"absolute\",left:\"75%\",top:\"-10px\",borderWidth:\"17px 15px 0\",borderStyle:\"solid\",borderColor:\"#42476a transparent\",display:\"block\",  width:0,transform:\"rotateZ(180deg)\"}\n\n\nexport default Pxvw;\n","import React from 'react';\n// import logo from './Assets/Images/computer.svg';\nimport '../App.css';\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"http://giphygifs.s3.amazonaws.com/media/13HBDT4QSTpveU/giphy.gif\" className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Kevin Dicke<br/>Master Web Developer\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n// import logo from './Assets/Images/computer.svg';\nimport pxvw from './Components/px-vw'\nimport home from './Components/Home'\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter basename='/'>\n     <div>\n     <nav>\n       <Link to=\"/\">Home</Link>\n       <Link to=\"/convert\">PX-VW</Link>\n     </nav>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/convert\" component={Convert} />\n     </div>\n    </BrowserRouter>\n  );\n}\n\nconst Home = () => home()\nconst Convert = () => pxvw()\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log(\"Contact me at k.dicke7@gmail.com\");\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}